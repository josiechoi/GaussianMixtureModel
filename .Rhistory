library(ggbiplot)
#ezp.pca$x
#head(ezp.pca)
ggbiplot(ezp.pca,labels=c(rownames(ezp.pca)))
biplot(ezp.pca,scale=0)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(ggplot2)
library(FactoMineR)
install.packages("FactoMineR")
library(dplyr)
library(ggplot2)
library(FactoMineR)
# Principal Component Analysis and Factor Analysis in R
path<-choose.files()
mydata<- read.csv(path)
attach(mydata)
# Define variables
X <- cbind(Ag, Mining, Constr, Manuf, Manuf_nd, Transp, Comm, Energy, TradeW, TradeR, RE, Services, Govt)
# Descriptive statistics
summary(X)
cor(X)
# Principal component analysis
pca1 <- princomp(X, scores=TRUE, cor=TRUE)
summary(pca1)
# Loadings of principal components
loadings(pca1)
#pca1$loadings
# Scree plot of eigenvalues
plot(pca1)
screeplot(pca1, type="line", main="Scree Plot")
# Biplot of score variables
biplot(pca1)
# Scores of the components
pca1$scores[1:10,]
# Rotation
varimax(pca1$loadings[,1:3])
promax(pca1$loadings[,1:3])
library(dplyr)
library(ggplot2)
library(FactoMineR)
#remove some of the meaningless domains
drops <- c("google.com","images.scholarsportal.info","readcube.com","crossref.org","refworks.com")
ezproxy_pca<-ezproxy_pca[ , !(names(ezproxy_pca) %in% drops)]
#head(ezproxy_pca)
#summary(ezproxy_pca)
#cor(ezproxy_pca[,c(2:length(ezproxy_pca))])
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
loadings(ezp.pca)
plot(ezp.pca)
screeplot(ezp.pca,type="line",main="Scree Plot")
biplot(ezp.pca)
biplot(ezp.pca)
ezp.pca$scores[1:10]
#Rotation
#Rotation does not work yet
#varimax(ezp.pca$loadings[,1:3])
#promax(ezp.pca$loadings[,1:3])
#Rotation
#rotation does not work yet
varimax(ezp.pca$loadings[,1:3])
loadings(ezp.pca)
#Rotation
#rotation does not work yet
varimax(ezp.pca$loadings[,1:3])
loadings(ezp.pca)
#Rotation
#rotation does not work yet
#varimax(ezp.pca$loadings[,1:3])
#promax(ezp.pca$loadings[,1:3])
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
install.packages("psych")
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-1
pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-1
pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
#pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
#print(pca_iris_rotated$scores[1:5,])  # Scores returned by principal()
irisX <- iris[,1:4]
ezp_pcaX <-ezproxy_pca[,c(2:length(ezproxy_pca))
pca_iris        <- prcomp(ezp_pcaX, center=T, scale=T)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
#pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
#print(pca_iris_rotated$scores[1:5,])  # Scores returned by principal()
irisX <- iris[,1:4]
ezp_pcaX <-ezproxy_pca[,c(2:length(ezproxy_pca))
pca_ezp        <- prcomp(ezp_pcaX, center=T, scale=T)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
#pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
#print(pca_iris_rotated$scores[1:5,])  # Scores returned by principal()
irisX <- iris[,1:4]
ezp_pcaX <-ezproxy_pca[,c(2:length(ezproxy_pca))
pca_ezp        <- prcomp(ezp_pcaX, center=T, scale=T)
library(dplyr)
library(ggplot2)
#library(FactoMineR)
#library(factoextra)
#path<-file.choose()
# use 2020_ezproxy_usage_month_totals_offcampus_high_transpose
path<-"C:\\Users\\josep\\OneDrive\\ezproxy_pca\\2020_ezproxy_usage_month_totals_offcampus_high_transpose.csv"
ezproxy_pca<-read.csv(path)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
#pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
#print(pca_iris_rotated$scores[1:5,])  # Scores returned by principal()
irisX <- iris[,1:4]
ezp_pcaX <-ezproxy_pca[,c(2:length(ezproxy_pca))
pca_ezp        <- prcomp(ezp_pcaX, center=T, scale=T)
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
#pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
#print(pca_iris_rotated$scores[1:5,])  # Scores returned by principal()
irisX <- iris[,1:4]
ezp_pcaX <-ezproxy_pca[,c(2:length(ezproxy_pca))]
pca_ezp        <- prcomp(ezp_pcaX, center=T, scale=T)
rawLoadings     <- pca_ezp$rotation[,1:ncomp] %*% diag(pca_ezp$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings
invLoadings     <- t(pracma::pinv(rotatedLoadings))
install.packages("pracma")
ezp.pca <- prcomp(ezproxy_pca[,c(2:length(ezproxy_pca))], center = TRUE,scale. = TRUE)
summary(ezp.pca)
ezp.pca$rotation
#From Stack Exchange (https://stats.stackexchange.com/questions/59213/how-to-compute-varimax-rotated-principal-components-in-r#:~:text=PCA%20is%20SVD%20decomposition%20X,so%20X%3DTL%E2%8A%A4.)
#"Rotations" is an approach developed in factor analysis; there rotations (such as e.g. varimax) are applied to loadings, not to eigenvectors of the covariance matrix. Loadings are eigenvectors scaled by the square roots of the respective eigenvalues. After the varimax rotation, the loading vectors are not orthogonal anymore (even though the rotation is called "orthogonal"), so one cannot simply compute orthogonal projections of the data onto the rotated loading directions.
library(psych)
ncomp<-2
#pca_iris_rotated <- psych::principal(ezp.pca, rotate="varimax", nfactors=ncomp, scores=TRUE)
#print(pca_iris_rotated$scores[1:5,])  # Scores returned by principal()
library(pracma)
irisX <- iris[,1:4]
ezp_pcaX <-ezproxy_pca[,c(2:length(ezproxy_pca))]
pca_ezp        <- prcomp(ezp_pcaX, center=T, scale=T)
rawLoadings     <- pca_ezp$rotation[,1:ncomp] %*% diag(pca_ezp$sdev, ncomp, ncomp)
rotatedLoadings <- varimax(rawLoadings)$loadings
invLoadings     <- t(pracma::pinv(rotatedLoadings))
scores          <- scale(ezp_pcaX) %*% invLoadings
print(scores[1:5,])                   # Scores computed via rotated loadings
knitr::opts_chunk$set(echo = TRUE)
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Drepression,HTN,OA,COPD)
library(dplyr)
library(tableone)
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Drepression,HTN,OA,COPD)
library(dplyr)
library(tableone)
path<-file.choose()
data<-read.csv(path)
#data - Use  diabetes_may1_2019_ijaz_raw.csv
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Drepression,HTN,OA,COPD)
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Depression,HTN,OA,COPD)
head(data)
summary(data)
names(data)
#Table 1
myvars=c('Age_at_Exam','Sex','sBP','BMI','LDL','HDL','A1c','TG','Total_Cholesterol','Diabetes','HTN','OA','CoPD','FBS')
tab <- CreateTableOne(vars = myvars, data = data)
tab
tab1 <- CreateTableOne(vars = myvars, data = data, strata='Diabetes')
tab1
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Depression,HTN,OA,COPD)
head(data)
summary(data)
names(data)
data<- data %>%mutate(Sex = replace(Sex, Sex == "MALE", "Male"))
#Table 1
myvars=c('Age_at_Exam','Sex','sBP','BMI','LDL','HDL','A1c','TG','Total_Cholesterol','Diabetes','HTN','OA','CoPD','FBS')
tab <- CreateTableOne(vars = myvars, data = data)
tab
tab1 <- CreateTableOne(vars = myvars, data = data, strata='Diabetes')
tab1
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Depression,HTN,OA,COPD)
head(data)
summary(data)
names(data)
#Cleaning up the data
data<- data %>%mutate(Sex = replace(Sex, Sex == "MALE", "Male"))
data<- data %>%mutate(Sex = replace(Sex, Sex == "FEMALE", "Female"))
#Table 1
myvars=c('Age_at_Exam','Sex','sBP','BMI','LDL','HDL','A1c','TG','Total_Cholesterol','Diabetes','HTN','OA','CoPD','FBS')
tab <- CreateTableOne(vars = myvars, data = data)
tab
tab1 <- CreateTableOne(vars = myvars, data = data, strata='Diabetes')
tab1
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
mod.2<-data%>%glm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+BMI*BMI+BMI*OA+A1c*A1c+factor(Sex))
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+BMI*BMI+BMI*OA+A1c*A1c+factor(Sex))
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI*BMI+BMI*OA+A1c*A1c)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
#data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
#data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,comorbidities,OA)
data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol)
cor(data_num)
data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,comorbidities,OA)
#data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol)
cor(data_num)
#McFadden’s R squared in R
nullmod <- glm(data$Diabetes~1, family="binomial")
1-logLik(mod.1)/logLik(nullmod)
#McFadden’s R squared in R
# <- glm(data$Diabetes~1, family="binomial")
#1-logLik(mod.1)/logLik(nullmod)
data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#Logistic Regression (dependent - Diabetes)
mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,comorbidities,OA)
#data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol)
cor(data_num)
#McFadden’s R squared in R
# <- glm(data$Diabetes~1, family="binomial")
1-logLik(mod.1)/logLik(nullmod)
library(car)
vif(mod.1)
library("Hmisc")
mydata.rcorr = rcorr(as.matrix(data_num))
mydata.rcorr
#install.packages("corrplot")
#library(corrplot)
#corrplot(as.matrix(corrplot()))
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,comorbidities,OA)
#data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol)
#cor(data_num)
# Load the package
library(mclust)
X<-data[,c(3,4,6,8)]
BIC<-mclustBIC(X)
View(rawLoadings)
View(tab)
View(nullmod)
# Load the package
library(mclust)
#testing on (3-sBP, 4-BMI,7-A1c,8-TG,9-FBS)
X<-data[,c(3,4,7,8,9)]
BIC<-mclustBIC(X)
# Load the package
library(mclust)
#testing on (3-sBP, 4-BMI,7-A1c,8-TG,9-FBS)
X<-data[,c(3,4,7,8,9)]
BIC<-mclustBIC(X)
library(dplyr)
library(tableone)
path<-file.choose()
data<-read.csv(path)
#data - Use  diabetes_may1_2019_ijaz_raw.csv
data<-data%>%select(Age_at_Exam,Sex,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,Depression,HTN,OA,COPD)
head(data)
summary(data)
names(data)
#Cleaning up the data
data<- data %>%mutate(Sex = replace(Sex, Sex == "MALE", "Male"))
data<- data %>%mutate(Sex = replace(Sex, Sex == "FEMALE", "Female"))
#Table 1
myvars=c('Age_at_Exam','Sex','sBP','BMI','LDL','HDL','A1c','TG','Total_Cholesterol','Diabetes','HTN','OA','CoPD','FBS')
tab <- CreateTableOne(vars = myvars, data = data)
tab
tab1 <- CreateTableOne(vars = myvars, data = data, strata='Diabetes')
tab1
data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#Logistic Regression (dependent - Diabetes)
mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol,Diabetes,comorbidities,OA)
#data_num<-data%>%select(Age_at_Exam,sBP,BMI,LDL,HDL,A1c,TG,FBS,Total_Cholesterol)
#cor(data_num)
#McFadden’s R squared in R
# <- glm(data$Diabetes~1, family="binomial")
1-logLik(mod.1)/logLik(nullmod)
library(car)
vif(mod.1)
library("Hmisc")
mydata.rcorr = rcorr(as.matrix(data_num))
mydata.rcorr
#install.packages("corrplot")
#library(corrplot)
#corrplot(as.matrix(corrplot()))
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
# Load the package
library(mclust)
#testing on (3-sBP, 4-BMI,7-A1c,8-TG,9-FBS)
X<-data[,c(3,4,7,8,9)]
BIC<-mclustBIC(X)
BIC
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(6,7)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(6,7)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(3,4,7,8,9)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(3,4,7,8,9,17,18)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#Logistic Regression (dependent - Diabetes)
mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+TG+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#Logistic Regression (dependent - Diabetes)
mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+TG+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+TG+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
#summary(mod.1)
summary(mod.2)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(4,8)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(4,7,8,)],2)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(4,7,8)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(4,7,8)],3)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
data$comorbidities<-data$HTN+data$OA+data$COPD+data$Depression
#Logistic Regression (dependent - Diabetes)
mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+TG+BMI+LDL+HDL+Age_at_Exam,family=binomial)
#Ijaz's model
#addint the quadratic elements
#assumgin FBS = Fasting Plasma Glucose (FPG) - dependent variable
data$BMI2<-data$BMI^2
data$A1c2<-data$A1c^2
mod.2<-data%>%lm(formula=FBS~Age_at_Exam+sBP+BMI+LDL+HDL+A1c+TG+factor(Diabetes)+OA+factor(Sex)+BMI2+BMI*OA+A1c2)
#mod.1<-data%>%glm(formula=factor(Diabetes)~FBS+sBP+Total_Cholesterol+BMI+LDL+HDL+Age_at_Exam+factor(Sex),family=binomial)
summary(mod.1)
summary(mod.2)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(1,4,7,8)],3)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(3,4,6,7,8)],3)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
BIC <- mclustBIC(data[,c(3,4,6,7,8)])
plot(BIC)
summary(BIC)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(3,4,6,7,8)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for three distinct groups.
mcl.model <- Mclust(data[,c(3,4,6,7,8)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
plot(mcl.model,what="uncertainty",main="Mclust Uncertainty")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for two distinct groups.
mcl.model <- Mclust(data[,c(3,7,8)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
plot(mcl.model,what="uncertainty",main="Mclust Uncertainty")
table(data$Diabetes,mcl.model$classification)
# Select 4 continuous variables and look for two distinct groups.
mcl.model <- Mclust(data[,c(3,7,8)],2)
# Plot our results.
plot(mcl.model, what = "classification", main = "Mclust Classification")
plot(mcl.model,what="uncertainty",main="Mclust Uncertainty")
plot(mcl.model)
